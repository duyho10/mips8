module alu(ALU_result,Zero, Overflow, Cout,
Negative,A,B,Funct);
output reg [7:0]ALU_result;
output Zero, Cout;
input [7:0]A,B;
input [5:0] Funct;
wire [7:0] Add_Sub_result,Logic_result;
wire C_out;
reg [7:0] SLT_result;
wire zero;
AddSub Add_Sub(Add_Sub_result,C_out,A,B,Funct[1]);
Logic Logic_r(Logic_result,A,B,Funct[1:0]);

always@(*)
begin
//Set less than
if (Funct[0])begin
SLT_result = A < B;
end else begin
SLT_result = $signed(A) < $signed(B);
end
//chon ket qua alu
//------------------------------
s---------------------------
if (Funct[5:2] == 4'b1000) begin
15ALU_result = Add_Sub_result;
end else if (Funct[5:2] == 4'b1001) begin
ALU_result = Logic_result;
end else if (Funct[5:3] == 3'b101) begin
ALU_result = SLT_result;
end else begin
ALU_result = B;
end
end
`Nor32 zero_result(zero, ALU_result,
'b00000000000000000000000000000000);
assign Zero = zero;
assign Negative = ALU_result[31];
assign Cout = C_out;
assign Overflow = Of;
endmodule